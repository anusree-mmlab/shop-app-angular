[{"section":"basics","question":"What is Angular?","answer":["Angular is js frameworks to build reactive web apps"]},{"section":"basics","question":"Angular versions","answer":["Angulajs = angular1, angular = [angular 2,4,5]. No breaking changes over the angular versions. ","Cli update, typescript update, minor feature changes are added"]},{"section":"basics","question":"Data binding","answer":["4 types. String interpolation {{variable_name}}, property binding [disabled], method binding (click), 2 way binding [(ngmodel)]. ","String interpolation and property data binding can sometimes used as alternative like ","<div [innerText]='status'></div> OR <div {{status}}></div>. 2 way data binding = event binding+ property binding. ","Forms module need to be imported to get it working"]},{"section":"basics","question":"What is typescript","answer":["Is superscript of javascript. Class feature, interface support, data type for strongly typed language etc . Anbular cli converts typescript to normal javascript during runtime"]},{"section":"basics","question":"Components","answer":["Are the basic building blocks. App component which is bootstrapped is the basic component. Components can be added using @Component({selector:'app-mycomp'}). It can also be added as a classname or an atttribute like @Component({selector:'[app-mycomp],selector:'.app-mycomp'}). ","Which is then accessed like <div app-mycomp> </div> OR <div class='app-comp'> </div>"]},{"section":"basics","question":"NgModule","answer":["Is an angular directive. It bundles different components, directives, pipes, services etc to a package. Which can then be used by other modules in the angular app"]},{"section":"basics","question":"Decorators","answer":["Preceded with the @. @NgModule, @Component, @Directive"]},{"section":"basics","question":"Styles, Style URLs","answer":["Backslashes `` to specify multi line styles. Style urls is an array of css file names. External css like bootstrap can be added as a package and in the angular.cli, the path to .min.css can be added as a new way of doing things "]},{"section":"directives","question":"Directives","answer":["Are instructions to the DOM. Components are also directives [directives with templates]. There are directives with no templates - attribute directives. ..<div directive-name></div>. @Directive({selector: '[my-directive]'}). There are other directives like structural directives, which controls the display of the DOM elements. This is an attribute directive , ","<div [mystyle]=\"{backgroundColor:'red'}\"</div>. *ngIf, *ngFor are structural directives. "," <div *ngIf=\"status;else showthis\">---- </div> ","<ng-template #showthis> <div>----the else part----- </div> </ng-template>"]},{"section":"directives","question":"ngStyle, ngClass Directives","answer":["They are attribute directives that uses property binding. [ngStyle]=\"getActiveProps(p)\", "]},{"section":"debugging","question":"How to debug","answer":["1. Using the console log messages"," 2. by adding break points on the sources js files. "," 3. By using Augury plugin- a chrome extension"]},{"section":"ComponentCommunication","question":"How does components communicates","answer":["From parent to child, property binding can be used along with @Input() in the receiving child component. "," From the child to parent, need to use EventEmitter, and @Output decorator , @Output() newGameAdded = new EventEmitter<any>(); this.newGameAdded.emit({game:'Cricket'});"]},{"section":"ComponentCommunication","question":"Aliases in @Input and @Output","answer":["@Input('alias') OR @Ouput('alias') can be used to hide the name of the function to be visible in the calling section [Not Exposing]."]},{"section":"Services","question":"Why Services are used","answer":["By using the @Input and @Output decorators , things will be messy when the app grows further. So serviceses came into place. For smaller tasks still they are a good option"]},{"section":"style,view","question":"View Encapsulation","answer":["Normally the css files dont follow any rule in applying styles, when comes to browser when multiple css files are used. Angular does in a different way, in it, each components css file is applied to that component only. This is known as ViewEncapsulation. "," This can be changed by adding encapsulation: ViewEncapsulation:NONE to the Component decorator"]},{"section":"advanced","question":"Local reference","answer":["input #localvar/> <div> {{localVar}} </div> "," gives the result. This value is not accessible from typescript, all accessible anywhere in the template. In order to get accessbile to the typescript it need to be passed as function parameter."]},{"section":"advanced","question":"Accessing DOM from typescript","answer":["@ViewChild('localrefname') can be used to access DOM elements. "," @ViewChild('localrefname') viewchildInp:ElementRef; viewchildInp.nativeElement.value. ","It is not good way to set the value using @ViewChild from the typescript. "]},{"section":"advanced","question":"How to access the html inside our components","answer":["ng-content tag can be used in the receiving component"]},{"section":"advanced","question":"Component Life Cycle","answer":["ngOnInit, ngOnChanges - when @Input is changed, ngDoCheck - when any thing in the DOM changes like click events or any kind of action. "]},{"section":"directives","question":"How Directives work? How to create a custom attribute directive?","answer":["@Directive({selector: '[my-directive]'}) constructor( elmentRef: ElementRef){} ngOnInit() {this.elementRef.NativeElement.style.backgroundColor='red'} <div my-directive> </div>."," But this method s not an elegent way. So instead use Renderer2 and ElementRef. In order to use a directive, it need to be added to the declarations array section of the module."]},{"section":"directives","question":"What is a HostListener decorator?","answer":["This is used inside directive, to make the directive creation more dynamic. like @HostListener('mouseenter') onMouseenter; onMouseenter() {this.elementRef.render, 'style', ''''}"]},{"section":"directives","question":"Is it possible to create our own structural directives?","answer":["Yes. @Input decorator can be used to create custom structoral directive"]},{"section":"directives","question":"ngSwtich directive","answer":["<div [ngSwitch]=\"value\"> <div *ngSwitchCase=\"4\"> -----</div> </div>"]},{"section":"services","question":"What is a service?","answer":["Services are normal typescript class. They do not have @Service decorator. Services helps to avoid the messy @Input and @Output, and makes the data binding easier. ","Services are injected to the providers array of app module, app component, lazy/shared module, a component itself"]},{"section":"services","question":"What is a hierarchical injectore","answer":["services are injected to the providers array of app module, app component, lazy/shared module, a component itself. module provider = application wide service instance including components, directives, other services. "," app component= same instant on components and directives not serviicesetc... this hierarchy is known as dependancy injection hierarchy."]},{"section":"services","question":"@Injector","answer":["A service can be injected to other service. In order to do so, need to add the service to the module level providers. @Injector is added to that service class which actually receives the external service"]},{"section":"routing","question":"A basic route set up","answer":["import {Routes, RouterModule}","const routes: Routes = [{path: \"\", component: \"HomeComponent\"]},{path: \"user/:id\", component: \"UserComponent\"]}, {path: \"**\", component: \"NotFoundComponent\"]}]","imports: [RouterModule.forRoot(routes)]","exports: [RouterModule]"]},{"section":"routing","question":"How to prevent page reloading with Routing?","answer":["Instead of <a href=\"\">, should use ","<a routerLink=\"\" [routerLinkActive] =\"activeClassname\"  [routerLinkActiveOptions]=\"{exact :'true'}\" >Link</a>","routerLink prevents the page from reloading and thereby preserving the application state"]},{"section":"routing","question":"How to pass and access parameters from the URL?","answer":["Can use while route configuration {path:\"user:id\"}","<a [routerLink]=\"['user',10]\">User 1</a>","import {ActivatedRoute from '@angular/route'}","inject the route constructor(private route: ActivatedRoute){}","ngOnInit() {this.route.snapshot.params('id') OR this.route.params.subscribe((param) => { console.log (param.id)}","snapshot is useful when the route is loaded for the first time, if the same page will again load the same route with different params, then this wont work","In order to observe to the changes need to use the Observable method"]},{"section":"routing","question":"How to navigate to another URL from the typescript?","answer":["import {Router} from '@angular/router'","inject it constructor(public router: Router)","this.router.navigate(['user',10,{queryParams: {edit:'true'}, {fragments:{'isEditable':true}])","In order to retrieve the queryparams or fragments, can use the same method to get the params"]},{"section":"routing","question":"How to set up child routing?","answer":["When the main routes have many sub routes, it is good to keep sub routes","[{path:'users', component:COMPONENTNAME, children: [{path:':id', component: SINGLEUSER}]}, {path:':id/edit', component: EDITUSER}]}]"]},{"section":"observables, routing","question":"How obeservables works with routing","answer":["The route params can be dynamically fetched using subscribing to Observables.","Angular uses Observables a lot to make its dynamic behaviour possible.","The observables that is used by angular will be destroyed by angular. Angular will take care that. ","But for the observables, that is defined by us we need to destroy using ngOnDestroy() lifecycle method to avoid memory leakage"]},{"section":"basics","question":"","answer":[""]},{"section":"basics","question":"","answer":[""]},{"section":"basics","question":"","answer":[""]},{"section":"basics","question":"","answer":[""]},{"section":"basics","question":"","answer":[""]},{"section":"basics","question":"","answer":[""]},{"section":"basics","question":"","answer":[""]}]